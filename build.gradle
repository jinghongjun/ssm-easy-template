version '2.0'

apply plugin: 'war'
apply plugin: 'idea'
apply plugin: 'eclipse-wtp'

apply plugin: 'org.akhikhl.gretty'
apply plugin: 'org.flywaydb.flyway'
apply plugin: 'io.github.robwin.swagger2markup'
apply plugin: 'org.asciidoctor.convert'
apply from: 'dependencies.gradle'

//指定gradle wrapper版本
task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}


configurations {
    mybatisGenerator
}

//配置插件仓库
buildscript {

    apply from: 'dependencies.gradle'

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {

        classpath libraries.gretty
        classpath: libraries.mysql_connector_java
        classpath gradlePlugins.flyway_gradle_plugin

        //swagger2markup
        classpath gradlePlugins.swagger2markup_gradle_plugin
        classpath gradlePlugins.asciidoctor_gradle_plugin
        classpath gradlePlugins.swagger2markup_gradle_plugin
        classpath libraries.asciidoctorj_pdf
        
    }


}

//gretty设置
gretty {
    port = 8080
    contextPath = "/"
}


ext {
    if (!project.hasProperty("env")) {
        println '没有配置数据环境，默认使用 开发环境'
        env = "dev"

    }
    println "使用数据库环境为:${project['env']}"

    asciiDocOutputDir = file("${buildDir}/asciidoc")
    println asciiDocOutputDir.absolutePath
    swaggerOutputDir = file("${buildDir}/swagger")
    println swaggerOutputDir.absolutePath

}

def getDbProperties = {
    def properties = new Properties()
    def dbPropertiesPath = sourceSets.main.resources.srcDirs[1].path;
    file("$dbPropertiesPath/jdbc-mysql.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }

    properties;

}

sourceSets {
    main {
        resources {
            srcDir("src/main/resources")

            if (project['env'] == 'dev') {
                srcDir("src/main/resources-dev")
            } else if (project['env'] == 'prod') {
                srcDir('src/main/resources-prod')
            }

        }


    }


}

test {
    systemProperty 'io.springfox.staticdocs.outputDir', swaggerOutputDir
}

convertSwagger2markup {
    dependsOn clean,test
    inputDir swaggerOutputDir
    examplesDir asciiDocOutputDir
    pathsGroupedBy io.github.robwin.swagger2markup.GroupBy.TAGS
}


asciidoctor {
    dependsOn convertSwagger2markup
    sources {
        include 'index.adoc'
    }
    backends = ['html5', 'pdf']
    attributes = [
            doctype: 'book',
            'source-highlighter': 'coderay',
            toc: 'left',
            toclevels: '3',
            numbered: '',
            sectlinks: '',
            sectanchors: '',
            hardbreaks: '',
            generated: asciiDocOutputDir
    ]
}



flyway {
    def prop = getDbProperties()
    user = prop.getProperty('jdbc.user')
    url = prop.getProperty('jdbc.url')
    password = prop.getProperty('jdbc.pass')
    locations = ["filesystem:db/migration"]

}

repositories {
    mavenCentral()
    maven {
        url 'https://repo.spring.io/libs-milestone'
    }
}

//统一编码为utf-8
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

//依赖
dependencies {

    compile fileTree(dir: 'libs', include: ['*.jar'])

    testCompile libraries.rest_assured
    testCompile libraries.junit
    testCompile libraries.spring_test
    testCompile libraries.hamcrest_core
    testCompile libraries.mockito_core
    testCompile libraries.json_schema_validator
    testCompile libraries.spring_mock_mvc
    testCompile libraries.spring_restdocs_restassured

    compile libraries.spring_webmvc
    compile libraries.spring_orm
    compile libraries.spring_context_support
    compile libraries.mysql_connector_java
    compile libraries.mybatis
    compile libraries.mybatis_spring
    compile libraries.pagehelper
    compile libraries.shiro_spring
    compile libraries.shiro_web


    compile libraries.tomcat_jdbc
    compile libraries.mail
    compile libraries.jackson_databind
    compile libraries.aspectjweaver
    compile libraries.commons_fileupload
    compile libraries.log4j
    compile libraries.mybatis_mapper
    providedCompile libraries.servlet_api


    compile libraries.jackson_dataformat_xml

    //swagger
    compile libraries.springfox_swagger
    compile libraries.springfox_swagger_ui
    compile libraries.springfox_staticdocs

    testCompile libraries.spring_restdocs_mockmvc
    compile libraries.assertj_swagger
    testCompile libraries.jackson_module_jsonSchema


    mybatisGenerator libraries.mybatis_generator_core
    mybatisGenerator libraries.mysql_connector_java
    mybatisGenerator libraries.mybatis_mapper

}





task mybatisGenerate << {
    def prop = getDbProperties()

    ant.properties['targetProject'] = projectDir.path
    ant.properties['driverClass'] = prop.getProperty('jdbc.driverClassName')
    ant.properties['connectionURL'] = prop.getProperty('jdbc.url')
    ant.properties['userId'] = prop.getProperty('jdbc.user')
    ant.properties['password'] = prop.getProperty('jdbc.pass')
    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
    ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
    ant.properties['modelPackage'] = this.modelPackage
    ant.properties['mapperPackage'] = this.mapperPackage
    ant.properties['sqlMapperPackage'] = this.sqlMapperPackage

    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    ant.mbgenerator(overwrite: true,
            configfile: 'db/generatorConfig.xml', verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'userId')
            propertyref(name: 'driverClass')
            propertyref(name: 'connectionURL')
            propertyref(name: 'password')
            propertyref(name: 'src_main_java')
            propertyref(name: 'src_main_resources')
            propertyref(name: 'modelPackage')
            propertyref(name: 'mapperPackage')
            propertyref(name: 'sqlMapperPackage')

        }
    }
}




